import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
import { Document as DocumentInfo } from '../../api/proto/exa/language_server_pb/language_server_pb';
import { Dispatch, SetStateAction } from 'react';
import { PromiseClient } from '@connectrpc/connect';
import { Status } from './Status';
import { MonacoCompletionProvider } from './CompletionProvider';
import { LanguageServerService } from '../../api/proto/exa/language_server_pb/language_server_connect';
declare module 'monaco-editor' {
    namespace editor {
        interface ICodeEditor {
            _commandService: {
                executeCommand(command: string): unknown;
            };
        }
    }
}
export declare class InlineCompletionProvider implements monaco.languages.InlineCompletionsProvider {
    readonly setCompletionCount: Dispatch<SetStateAction<number>>;
    private numCompletionsProvided;
    readonly completionProvider: MonacoCompletionProvider;
    constructor(grpcClient: PromiseClient<typeof LanguageServerService>, setCompletionCount: Dispatch<SetStateAction<number>>, setCodeiumStatus: Dispatch<SetStateAction<Status>>, setCodeiumStatusMessage: Dispatch<SetStateAction<string>>, apiKey?: string | undefined, multilineModelThreshold?: number | undefined);
    freeInlineCompletions(): void;
    provideInlineCompletions(model: monaco.editor.ITextModel, position: monaco.Position, context: monaco.languages.InlineCompletionContext, token: monaco.CancellationToken): Promise<monaco.languages.InlineCompletions<monaco.languages.InlineCompletion> | undefined>;
    acceptedLastCompletion(completionId: string): void;
    updateOtherDocuments(otherDocuments: DocumentInfo[]): void;
}
