import { PromiseClient } from '@connectrpc/connect';
import { CancellationToken } from './CancellationToken';
import { Document as DocumentInfo } from '../../api/proto/exa/language_server_pb/language_server_pb';
import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
import { LanguageServerService } from '../../api/proto/exa/language_server_pb/language_server_connect';
import { Status } from './Status';
/**
 * CompletionProvider class for Codeium.
 */
export declare class MonacoCompletionProvider {
    readonly setStatus: (status: Status) => void;
    readonly setMessage: (message: string) => void;
    readonly apiKey?: string | undefined;
    readonly multilineModelThreshold?: number | undefined;
    private client;
    private sessionId;
    /**
     * A list of other documents to include as context in the prompt.
     */
    otherDocuments: DocumentInfo[];
    constructor(grpcClient: PromiseClient<typeof LanguageServerService>, setStatus: (status: Status) => void, setMessage: (message: string) => void, apiKey?: string | undefined, multilineModelThreshold?: number | undefined);
    private getAuthHeader;
    private getMetadata;
    /**
     * Generate CompletionAndRanges.
     *
     * @param model - Monaco model.
     * @param token - Cancellation token.
     * @returns InlineCompletions or undefined
     */
    provideInlineCompletions(model: monaco.editor.ITextModel, monacoPosition: monaco.Position, token: CancellationToken): Promise<monaco.languages.InlineCompletions<monaco.languages.InlineCompletion> | undefined>;
    /**
     * Record that the last completion shown was accepted by the user.
     * @param ctx - Codeium context
     * @param completionId - unique ID of the last completion.
     */
    acceptedLastCompletion(completionId: string): void;
    /**
     * Gets document info object for the given document.
     *
     * @param document - The document to get info for.
     * @param position - Optional position used to get offset in document.
     * @returns The document info object and additional UTF-8 byte offset.
     */
    private getDocumentInfo;
    /**
     * Converts the completion and range to inline completion item.
     *
     * @param completionItem
     * @param document
     * @returns Inline completion item.
     */
    private createInlineCompletionItem;
}
